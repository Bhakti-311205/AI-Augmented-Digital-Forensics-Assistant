import requests
import hashlib
import os

def check_malware_virustotal(api_key, file_path):
    if not os.path.exists(file_path):
        return {"error": f"File '{file_path}' not found."}

    try:
        # Step 1: Calculate SHA256 hash
        with open(file_path, "rb") as f:
            file_data = f.read()
        sha256_hash = hashlib.sha256(file_data).hexdigest()

        # Step 2: Check if report exists
        headers = {
            "x-apikey": api_key
        }
        report_url = f"https://www.virustotal.com/api/v3/files/{sha256_hash}"
        report_resp = requests.get(report_url, headers=headers)

        if report_resp.status_code == 200:
            json_resp = report_resp.json()
            return {
                "File SHA256": sha256_hash,
                "Analysis": json_resp.get("data", {}).get("attributes", {}).get("last_analysis_stats", {}),
                "Scan Date": json_resp.get("data", {}).get("attributes", {}).get("last_analysis_date", "N/A"),
                "Permalink": f"https://www.virustotal.com/gui/file/{sha256_hash}"
            }

        # Step 3: Upload the file if report doesn't exist
        upload_url = "https://www.virustotal.com/api/v3/files"
        with open(file_path, "rb") as f:
            files = {"file": (os.path.basename(file_path), f)}
            upload_resp = requests.post(upload_url, headers=headers, files=files)

        if upload_resp.status_code == 200:
            analysis_id = upload_resp.json()["data"]["id"]

            # Optional: You can poll the analysis endpoint or return immediate status
            return {
                "File SHA256": sha256_hash,
                "status": "Uploaded for analysis",
                "analysis_id": analysis_id,
                "message": "Please wait a few moments before analysis completes.",
                "Permalink": f"https://www.virustotal.com/gui/file/{sha256_hash}"
            }
        else:
            return {"error": f"Upload failed: {upload_resp.text}"}

    except Exception as e:
        return {"error": str(e)}
